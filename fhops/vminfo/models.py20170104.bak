# -*- coding:utf-8 -*-
from django.db import models
from django.contrib import admin
import os

#主机信息和应用程序信息
#业务标签
class info_label(models.Model):
    label = models.CharField(u'业务标签', max_length=16)
    def __unicode__(self):
        return self.label
    class Meta:
        verbose_name = verbose_name_plural = u'业务标签'
#主机状态
class info_status(models.Model):
    status = models.CharField(u'主机状态', max_length=16)
    def __unicode__(self):
        return self.status
    class Meta:
        verbose_name = verbose_name_plural = u'主机状态'

class info_group(models.Model):
    group_name = models.CharField(u'业务组名', max_length=16, null=True)
    def __unicode__(self):
        return self.group_name
    class Meta:
        verbose_name = verbose_name_plural = u'业务组名'

class app_info_alarm(models.Model):
    alarm_types = models.CharField(u'报警类型', max_length=10, null=True)

    def __unicode__(self):
        return self.alarm_types
    class Meta:
        verbose_name = verbose_name_plural = u'报警类型'

class info_location(models.Model):
    location = models.CharField(u'放置位置', max_length=20)

    def __unicode__(self):
        return self.location
    class Meta:
        verbose_name = verbose_name_plural = u'放置位置'
#维护者信息
class info_manager(models.Model):
    mana_name = models.CharField(u'维护者姓名', max_length=12, null=True)
    mana_phone = models.CharField(u'维护者电话', max_length=12, null=True)
    mana_email = models.EmailField(u'Email地址',)
    mana_group = models.ForeignKey(info_group,verbose_name=u'业务组名')
    mana_label = models.ManyToManyField(info_label,verbose_name=u'业务标签')
    def __unicode__(self):
        return self.mana_name

    class Meta:
        verbose_name = verbose_name_plural = u'维护者'

#主机信息
class vm_info(models.Model):
    hostname = models.CharField(u'主机名', max_length=32, null = True)
    os_version = models.CharField(u'OS版本', max_length=32, null = True)
    lan_ipaddr = models.GenericIPAddressField(u'内网IP', max_length=16,null = True)
    machine_id = models.CharField(u'主机ID', max_length=32, null = True)
    vm_mem = models.CharField(u'内存', max_length=12, null = True)
    vm_disk = models.CharField(u'硬盘', max_length=12, null = True)
    vm_cpu = models.CharField(u'CPU', max_length=12, null = True)
    vm_location = models.ForeignKey(info_location, verbose_name=u'放置位置')
    vm_types = models.CharField(u'主机类型', max_length=12, null = True)
    vm_status = models.ForeignKey(info_status, verbose_name=u'主机状态')
    vm_label = models.ManyToManyField(info_label, verbose_name=u'业务标签')
    vm_manager = models.ManyToManyField(info_manager, verbose_name=u'维护者')
    vm_remark = models.TextField(u'备注信息', max_length=256, null = True)

    def __unicode__(self):
        return self.hostname

    class Meta:
        verbose_name = verbose_name_plural = u'主机信息'


#程序信息
class app_info(models.Model):
    app_path = models.CharField(u'程序路径', max_length=50, null=True)
    app_vm_hostname = models.CharField(u'主机名称', max_length=32,null=True)
    app_ipadd_port = models.CharField('程序监听', max_length=20, null=True)
    app_log_path = models.CharField(u'日志路径', max_length=50, null=True)
    app_vm_id = models.CharField(u'主机ID', max_length=32,null=True)
    app_label = models.ForeignKey(info_label, verbose_name=u'业务标签')
    app_manager = models.ManyToManyField(info_manager, verbose_name=u'维护者')
    app_alarm = models.ManyToManyField(app_info_alarm, verbose_name=u'报警类型')
    app_remark = models.TextField(u'备注信息', max_length=256, null=True)

    def __unicode__(self):
        return self.app_path
    class Meta:
        verbose_name = verbose_name_plural = u'程序信息'